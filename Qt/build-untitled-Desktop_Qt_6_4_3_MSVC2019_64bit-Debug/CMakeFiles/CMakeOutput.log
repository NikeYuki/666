The system is: Windows - 10.0.22621 - AMD64
Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
Compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.33.31629/bin/HostX64/x64/cl.exe 
Build flags: -DQT_QML_DEBUG
Id flags:  

The output was:
0
用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.33.31630 版
版权所有(C) Microsoft Corporation。保留所有权利。

CMakeCXXCompilerId.cpp
Microsoft (R) Incremental Linker Version 14.33.31630.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCXXCompilerId.exe 
CMakeCXXCompilerId.obj 


Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.exe"

Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.obj"

The CXX compiler identification is MSVC, found in "C:/Users/20720/Desktop/Qt/build-untitled-Desktop_Qt_6_4_3_MSVC2019_64bit-Debug/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.exe"

Detecting CXX compiler ABI info compiled with the following output:
Change Dir: C:/Users/20720/Desktop/Qt/build-untitled-Desktop_Qt_6_4_3_MSVC2019_64bit-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/PROGRA~1/MICROS~4/2022/COMMUN~1/Common7/IDE/COMMON~1/MICROS~1/CMake/Ninja/ninja.exe cmTC_37a34 && [1/2] Building CXX object CMakeFiles\cmTC_37a34.dir\CMakeCXXCompilerABI.cpp.obj
[2/2] Linking CXX executable cmTC_37a34.exe



Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: C:/Users/20720/Desktop/Qt/build-untitled-Desktop_Qt_6_4_3_MSVC2019_64bit-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):C:/PROGRA~1/MICROS~4/2022/COMMUN~1/Common7/IDE/COMMON~1/MICROS~1/CMake/Ninja/ninja.exe cmTC_a5c83 && [1/2] Building CXX object CMakeFiles\cmTC_a5c83.dir\src.cxx.obj
[2/2] Linking CXX executable cmTC_a5c83.exe


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
